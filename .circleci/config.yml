version: 2.1

branches:
  only:
    - master
    - develop
    - /[0-9]+.x/

executors:
  linux: # Docker using the Base Convenience Image
    docker:
      - image: 'cimg/base:2025.06'
  linuxnew: # Docker using the Base Convenience Image
    docker:
      - image: cimg/base:current-24.04
  macos: &macos-executor # macos executor running Xcode
    macos:
      xcode: 16.2.0
  linuxvm: # executor type
    machine:
      image: ubuntu-2404:current

workflows:
  build:
    jobs:
      # Default:
      # - build:
      #     TEST_INSTALL: 1
      #     OS: linux
      #     CC: gcc
      #     OOT: 0
      #     RUN_TEST: 1
      #     THREADING: none
      #     BUILD_CONFIG: auto
      #     PACKAGES: ''
      #     BLIS: download

      - build:
          OOT: 1
          THREADING: pthread
      - build:
          CC: clang
          THREADING: openmp
          PACKAGES: 'clang libomp-dev'
      - build:
          OS: macos
          CC: clang
          #THREADING: dispatch
      - build:
          THREADING: openmp
          BLIS: external
      #- build:
      #    THREADING: tbb
      #    PACKAGES: 'libtbb-dev'
      #- build:
      #    THREADING: none

jobs:
  build:
    parameters:
      OS:
        type: executor
        default: linux
      CC:
        type: string
        default: gcc
      OOT:
        type: integer
        default: 0
      RUN_TESTS:
        type: integer
        default: 1
      TEST_INSTALL:
        type: integer
        default: 1
      THREADING:
        type: string
        default: none
      BUILD_CONFIG:
        type: string
        default: auto
      PACKAGES:
        type: string
        default: ''
      BLIS:
        type: string
        default: download
    executor: << parameters.OS >>
    steps:
      - checkout

      - when:
          condition:
            not:
              equal: [ *macos-executor, << parameters.OS >> ]
          steps:
            - run:
                name: Installing Dependencies
                command:
                  sudo apt-get update && sudo NEEDRESTART_MODE=a apt-get install -y catch2 cmake make python3 << parameters.PACKAGES >>

      - when:
          condition:
            equal: [ *macos-executor, << parameters.OS >> ]
          steps:
            - run:
                name: Installing Dependencies
                command:
                  brew install cmake << parameters.PACKAGES >>

      - run:
          name: Configuring, Building, Testing
          command: |
            git submodule update --init --recursive

            export SRC_DIR=$(pwd)
            export CC="<< parameters.CC >>"
            export OOT="<< parameters.OOT >>"
            export BUILD_CONFIG="<< parameters.BUILD_CONFIG >>"
            export THREADING="<< parameters.THREADING >>"
            export RUN_TESTS="<< parameters.RUN_TESTS >>"
            export TEST_INSTALL="<< parameters.TEST_INSTALL >>"
            export BLIS="<< parameters.BLIS >>"

            case $CC in
                gcc) export CXX=g++;;
                clang) export CXX=clang++;;
            esac

            pwd
            if [ $OOT -eq 1 ]; then mkdir ../oot; cd ../oot; chmod -R a-w $SRC_DIR; fi
            pwd

            BUILD_DIR=$(pwd)

            echo "Configuration:"
            echo "CC                = $CC"
            echo "CXX               = $CXX"
            echo "OOT               = $OOT"
            echo "BUILD_CONFIG      = $BUILD_CONFIG"
            echo "THREADING         = $THREADING"
            echo "RUN_TESTS         = $RUN_TESTS"
            echo "TEST_INSTALL      = $TEST_INSTALL"
            echo "BLIS              = $BLIS"
            echo "BUILD_DIR         = $BUILD_DIR"
            echo "SRC_DIR           = $SRC_DIR"

            CONFIG_ARGS="--prefix=$BUILD_DIR/usr --enable-threading=$THREADING CC=$CC CXX=$CXX --with-blis-config-family=$BUILD_CONFIG"

            if [ $BLIS = external ]; then
                mkdir ../blis
                cd ../blis
                git init
                git remote add origin git@github.com:flame/blis
                git fetch --depth=1 origin $(cat $SRC_DIR/blis-git-tag)
                git checkout FETCH_HEAD
                ./configure --prefix=$(pwd)/usr --disable-shared --enable-static -t$THREADING auto
                make -j4 install
                CONFIG_ARGS="$CONFIG_ARGS --with-blis-dir=$(pwd)/usr"
                cd $BUILD_DIR
            fi

            if [ $RUN_TESTS -eq 1 ]; then
                CONFIG_ARGS="$CONFIG_ARGS --enable-tests"
            fi

            CONFIGURE="$SRC_DIR/configure $CONFIG_ARGS"
            echo "Running $CONFIGURE"
            $CONFIGURE
            pwd
            ls -l
            $CC --version
            $CC -v

            make V=1 VERBOSE=1 -j4
            make install

            if [ $RUN_TESTS -eq 1 ]; then
                export OMP_NUM_THREADS=2
                bin/test
            fi

            if [ $TEST_INSTALL -eq 1 ]; then
                $CXX -std=c++20 -o test_install $SRC_DIR/test/test_install.cxx -I$BUILD_DIR/usr/include -I$BUILD_DIR/usr/lib -ltblis
            fi
